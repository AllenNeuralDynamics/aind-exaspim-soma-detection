"""
Created on Fri Jan 3 12:30:00 2025

@author: Anna Grim
@email: anna.grim@alleninstitute.org

Code used to train neural network to classify somas proposals.

"""

import numpy as np
from sklearn.metrics import (
    accuracy_score,
    f1_score,
    precision_score,
    recall_score,
)


def evaluation_metrics(epoch, writer, hat_y, y, prefix="", threshold=0):
    """
    Computes and logs various evaluation metrics to a TensorBoard.

    Parameters
    ----------
    epoch : int
        Current training epoch. Used as the x-axis value for logging metrics
        in the TensorBoard.
    writer : torch.utils.tensorboard.SummaryWriter
        TensorBoard writer object to log the metrics.
    hat_y : numpy.ndarray
        Predicted generated by a neural network.
    y : numpy.ndarray
        True labels or ground truth values.
    prefix : str, optional
        String prefix to prepend to the metric names when logging to
        TensorBoard. The default is an empty string.
    threshold : float, optional
        Value that is used to threshold "hat_y" to obtain positive and
        negative predictions. The default is 0.

    Returns
    -------
    float
        F1 score for the given epoch.

    """
    # Compute metrics
    hat_y = (hat_y > threshold).astype(int)
    accuracy = accuracy_score(y, hat_y)
    accuracy_dif = accuracy - np.sum(y) / len(y)
    f1 = f1_score(y, hat_y)
    precision = precision_score(y, hat_y)
    recall = recall_score(y, hat_y)

    # Write results to tensorboard
    writer.add_scalar(prefix + "_accuracy", accuracy, epoch)
    writer.add_scalar(prefix + "_accuracy_df", accuracy_dif, epoch)
    writer.add_scalar(prefix + "_precision:", precision, epoch)
    writer.add_scalar(prefix + "_recall:", recall, epoch)
    writer.add_scalar(prefix + "_f1:", f1, epoch)
    return f1
